// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexico.flex

package josecarlos.lenguajes.proyecto2;

//Seccion de imports
import java.util.ArrayList;
import java.util.List;
import josecarlos.lenguajes.proyecto2.tokens.*;


@SuppressWarnings("fallthrough")
public class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\4\22\0\1\5\6\0"+
    "\1\6\2\7\2\10\1\7\1\11\1\12\1\10\12\13"+
    "\1\0\1\7\1\14\1\15\1\14\2\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\5\0"+
    "\1\47\1\0\32\50\12\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\7\25\1\1\10\1\0\1\11\3\0\1\7\3\0"+
    "\1\12\3\0\1\12\23\0\1\13\16\0\1\14\1\0"+
    "\1\13\1\15\44\0\1\16\11\0\1\17\13\0\1\20"+
    "\37\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\51\0\122\0\51\0\51\0\173"+
    "\0\244\0\315\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3"+
    "\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\51\0\u04a5\0\u04ce\0\u04f7\0\51\0\u0520\0\u0549"+
    "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\51\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88"+
    "\0\u04f7\0\u0bb1\0\51\0\51\0\u0bda\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u059b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004"+
    "\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c"+
    "\0\51\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b"+
    "\0\u1294\0\u12bd\0\51\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a"+
    "\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\51\0\u14a9"+
    "\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881"+
    "\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\3\1\5\1\6\1\7\1\10"+
    "\1\6\1\11\1\12\1\6\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\3\2\1\40\51\0\6\41\1\42"+
    "\4\41\1\43\35\41\5\0\1\44\55\0\1\45\1\11"+
    "\52\0\1\46\54\0\1\47\7\0\1\50\1\0\1\51"+
    "\4\0\1\52\2\0\1\53\33\0\1\54\5\0\1\55"+
    "\11\0\1\56\20\0\1\57\15\0\1\60\2\0\1\61"+
    "\27\0\1\62\3\0\1\63\14\0\1\64\56\0\1\65"+
    "\21\0\1\66\15\0\1\67\2\0\1\70\50\0\1\71"+
    "\34\0\1\56\7\0\1\72\51\0\1\73\36\0\1\74"+
    "\54\0\1\75\40\0\1\76\7\0\1\77\56\0\1\100"+
    "\5\0\1\101\41\0\1\56\3\0\1\102\50\0\1\103"+
    "\33\0\1\104\50\0\1\105\17\0\1\106\24\0\1\107"+
    "\3\0\1\110\14\0\1\111\6\0\1\112\35\0\1\113"+
    "\1\0\1\114\31\0\1\115\57\0\1\116\36\0\1\40"+
    "\33\0\2\40\6\41\1\42\50\41\1\42\4\41\1\117"+
    "\35\41\11\0\1\120\52\0\1\121\56\0\1\56\70\0"+
    "\1\122\30\0\1\123\47\0\1\56\54\0\1\124\50\0"+
    "\1\125\60\0\1\126\54\0\1\127\41\0\1\130\1\0"+
    "\1\131\6\0\1\132\30\0\1\133\67\0\1\134\27\0"+
    "\1\135\10\0\1\136\6\0\1\137\44\0\1\140\42\0"+
    "\1\141\53\0\1\142\56\0\1\143\45\0\1\144\50\0"+
    "\1\145\54\0\1\146\1\147\35\0\1\150\70\0\1\56"+
    "\34\0\1\151\63\0\1\124\36\0\1\124\56\0\1\123"+
    "\40\0\1\152\1\153\37\0\1\122\55\0\1\154\45\0"+
    "\1\155\56\0\1\156\5\0\1\157\1\0\1\56\41\0"+
    "\1\124\35\0\1\160\76\0\1\161\45\0\1\162\43\0"+
    "\1\163\41\0\1\164\43\0\1\133\60\0\1\165\5\0"+
    "\1\166\33\0\1\167\26\0\6\41\1\42\4\41\1\170"+
    "\35\41\2\120\1\171\2\0\44\120\22\0\1\172\54\0"+
    "\1\173\53\0\1\174\37\0\1\175\72\0\1\176\46\0"+
    "\1\177\43\0\1\200\33\0\1\201\50\0\1\202\3\0"+
    "\1\203\54\0\1\204\44\0\1\201\63\0\1\56\53\0"+
    "\1\205\50\0\1\162\32\0\1\206\60\0\1\56\60\0"+
    "\1\140\30\0\1\207\50\0\1\210\11\0\1\56\47\0"+
    "\1\56\43\0\1\211\53\0\1\56\41\0\1\212\60\0"+
    "\1\213\40\0\1\214\50\0\1\215\54\0\1\216\53\0"+
    "\1\163\60\0\1\203\31\0\1\217\50\0\1\56\64\0"+
    "\1\220\54\0\1\221\26\0\1\222\67\0\1\163\11\0"+
    "\6\41\1\42\4\41\1\223\35\41\37\0\1\56\44\0"+
    "\1\161\37\0\1\224\44\0\1\225\64\0\1\150\57\0"+
    "\1\226\50\0\1\124\50\0\1\163\26\0\1\227\63\0"+
    "\1\216\57\0\1\230\35\0\1\231\61\0\1\211\35\0"+
    "\1\232\65\0\1\56\46\0\1\233\27\0\1\234\71\0"+
    "\1\235\31\0\1\211\46\0\1\236\74\0\1\163\30\0"+
    "\1\230\53\0\1\237\23\0\6\41\1\42\2\41\1\240"+
    "\37\41\16\0\1\241\53\0\1\163\66\0\1\242\27\0"+
    "\1\243\72\0\1\56\34\0\1\150\46\0\1\244\54\0"+
    "\1\245\61\0\1\74\33\0\1\246\57\0\1\203\35\0"+
    "\1\244\32\0\6\41\1\42\4\41\1\247\35\41\33\0"+
    "\1\203\33\0\1\250\72\0\1\163\47\0\1\203\31\0"+
    "\1\203\63\0\1\251\15\0\6\41\1\42\4\41\1\252"+
    "\35\41\26\0\1\253\42\0\1\221\30\0\6\41\1\42"+
    "\2\41\1\254\37\41\33\0\1\211\15\0\6\41\1\42"+
    "\4\41\1\255\43\41\1\42\4\41\1\256\43\41\1\257"+
    "\42\41";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6560];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\2\11\31\1\1\0\1\11\3\0"+
    "\1\11\3\0\1\1\3\0\1\11\23\0\1\1\16\0"+
    "\1\1\1\0\2\11\44\0\1\11\11\0\1\11\13\0"+
    "\1\11\37\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

// Codigo Java

    private List<Token> lista = new ArrayList<Token>();
    private List<Token> listaVista = new ArrayList<Token>();
    private List<Token> listaErrores = new ArrayList<Token>();

    public void addList(Token token) {
        lista.add(token);
        addListaVista(token);
    }

    public void addListaErrores(Token token) {
        lista.add(token);
        listaErrores.add(token);
        addListaVista(token);
    }

    public void addListaVista(Token token) {
        listaVista.add(token);
    }

    public List<Token> getLista(){
        return lista;
    }

    public List<Token> getListaVista(){
        return listaVista;
    }
    
    public List<Token> getListaErrores(){
        return listaErrores;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addListaErrores(new Token(TokenType.DESCONOCIDO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 18: break;
          case 2:
            { addListaVista(new Token(TokenType.ESPACIO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 19: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 20: break;
          case 4:
            { addList(new Token(TokenType.SIGNO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 21: break;
          case 5:
            { addList(new Token(TokenType.ARITMETICO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 22: break;
          case 6:
            { addList(new Token(TokenType.ENTERO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 23: break;
          case 7:
            { addList(new Token(TokenType.RELACIONAL, yytext(), yyline, yycolumn));
            }
          // fall through
          case 24: break;
          case 8:
            { addList(new Token(TokenType.IDENTIFICADOR, yytext(), yyline, yycolumn));
            }
          // fall through
          case 25: break;
          case 9:
            { addList(new Token(TokenType.CADENA, yytext(), yyline, yycolumn));
            }
          // fall through
          case 26: break;
          case 10:
            { addList(new Token(TokenType.PALABRA_RESERVADA, yytext(), yyline, yycolumn));
            }
          // fall through
          case 27: break;
          case 11:
            { addList(new Token(TokenType.LOGICO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 28: break;
          case 12:
            { addList(new Token(TokenType.DECIMAL, yytext(), yyline, yycolumn));
            }
          // fall through
          case 29: break;
          case 13:
            { addList(new Token(TokenType.AGREGACION, yytext(), yyline, yycolumn));
            }
          // fall through
          case 30: break;
          case 14:
            { addList(new Token(TokenType.COMENTARIO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 31: break;
          case 15:
            { addList(new Token(TokenType.TIPO_DATO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 32: break;
          case 16:
            { addList(new Token(TokenType.BOOLEANO, yytext(), yyline, yycolumn));
            }
          // fall through
          case 33: break;
          case 17:
            { addList(new Token(TokenType.FECHA, yytext(), yyline, yycolumn));
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
